#!/usr/bin/env python
# encoding: utf-8
import os, os.path, sys, argparse, shlex, signal, subprocess, xml.dom.minidom, time
from basecmd import *
from subprocess import call
import menu
from xml.dom.minidom import parseString, getDOMImplementation

def getText(nodelist):
    rc = []
    for node in nodelist:
        if node.nodeType == node.TEXT_NODE:
            rc.append(node.data)
    return ''.join(rc)

class Exploit(object):

    def __init__(self):
        """ Arbitary constructor """
        self.path = "miscellaneous"

    def execute(self, session, arg):
        """ Arbitary function """

class Exploits(BaseCmd):

    def __init__(self, conn, session):
        BaseCmd.__init__(self, session)
        self.connected = conn
        self.session = session
        if (self.connected == 1):
            self.prompt = "*Afe/menu/exploit$ "
            self.isconn = True
        else:
            self.prompt = "Afe/menu/exploit$ "
            self.isconn = False
        self.exploits = {} # list of modules 
        self.do_reload(None)
    
    def do_back(self, _args):
        """
Return to main menu
        """
        return -1

    def _find_exploits(self):
	    exploit_dir = os.getcwd() + "/exploits"
	    dir_list = [d for d in os.listdir(exploit_dir) if d.endswith(".xml")]
	    return dir_list
	
    def _list_exploits(self, dir_list):
	    self.exploits = dir_list
		
	
    def do_list(self, _args):
	    """
List all available modules
	    """
	    for exploit in sorted(self.exploits):
		    print exploit
		
    def do_reload(self, _args):
	    """
Reloads the Plugins which are loaded in the memory
	    """
	    exploitnames = self._find_exploits()
	    self._list_exploits(exploitnames)

    def preexec_function():
        signal.signal(signal.SIGINT, signal.SIG_IGN)

    def preexec():
	    os.setpgrp()

    def do_sploit(self, args):
        """
Run a custom module
usage: sploit [--arg <arg>] exploitname.xml
        """

        # Define command-line arguments using argparse
        parser = argparse.ArgumentParser(prog = 'sploit', add_help = False)
        parser.add_argument('exploit')
        parser.add_argument('--arg', '-a', metavar = '<arg>')
        try:
            splitargs = parser.parse_args(shlex.split(args))
            self.exploits.index(splitargs.exploit)
        except ValueError:
	        pass
	        print splitargs.exploit
	        print "Error : Module not Found, please Reload"
        except:
                pass
        else:
	        if os.name == 'nt':
	            os.system('cls')
	        else:
	            os.system('clear')
	        exploit_file = os.getcwd() + "/exploits/" + splitargs.exploit
	        file = open(exploit_file,'r')
	        data = file.read()
	        file.close()
	        dom = parseString(data)
	        if (len(dom.getElementsByTagName('author'))!=0):
	            xmlTag = dom.getElementsByTagName('author')[0].toxml()
	            author = xmlTag.replace('<author>','').replace('</author>','')
	        else:
	            author = "Unknown"
	        if (len(dom.getElementsByTagName('description'))!=0):
	            xmlTag = dom.getElementsByTagName('description')[0].toxml()
	            desc = xmlTag.replace('<description>','').replace('</description>','')
	        else:
	            desc = "Unknown"
	        if (len(dom.getElementsByTagName('date'))!=0):
	            xmlTag = dom.getElementsByTagName('date')[0].toxml()
	            sdate = xmlTag.replace('<date>','').replace('</date>','')
	        else:
	            sdate = "Unknown"
	        if (len(dom.getElementsByTagName('name'))!=0):
	            xmlTag = dom.getElementsByTagName('name')[0].toxml()
	            appname = xmlTag.replace('<name>','').replace('</name>','')
	        else:
	            print "<name></name> doesnot exist !"
	            return
	        if (len(dom.getElementsByTagName('connected'))!=0):
	            xmlTag = dom.getElementsByTagName('connected')[0].toxml()
	            if xmlTag == "<connected/>":
	                sconn = "0"
	            else:
	                sconn = xmlTag.replace('<connected>','').replace('</connected>','')
	        else:
	            sconn = "1"
	        print "Exploit made by : " + author
	        print "Description : " + desc
	        print "App Name : " + appname
	        print "Exploit built on: " + sdate
	        print "------------------------------------------"
	        print "Exploiting !!"
	        print "Checking if device needs to be connected !"
	        if (self.isconn == True):
	            self.isconn == True
	            self.connected = 1
	            self.prompt = "*Afe/menu/exploit$ "
	        else:
	            self.isconn == False
	            self.connected = 0
	            self.prompt = "Afe/menu/exploit$ "
	        if sconn == "1" and self.isconn == False:
	            print "Exiting: ERROR - AFE Agent is not connected but it is required !"
	        elif sconn == "1" and self.isconn == True:
	            print "Device : [connected]"
	            #TODO - Work here
	            querybuild = "app "+str(appname.strip())
	            self.session.sendData(querybuild + "\n")
	            if(self.session.receiveData() == "no"):
	                print "ERROR : Package not found ! exploit Failed !"
	                return
	            replacements = {}
	            count = len(dom.getElementsByTagName('out'))
	            if count > 0:
	                for x in range(count):
	                    outcon = dom.getElementsByTagName('out')[x].firstChild.wholeText.strip()
	                    attrib = dom.getElementsByTagName('out')[x].attributes.keys()
	                    if len(attrib) > 0:
	                        attribval = dom.getElementsByTagName('out')[x].attributes["input"].value.strip()
	                        varout = raw_input(outcon + " ")
	                        if varout.strip():
	                            replacements[attribval] = varout
	                    else:
	                         print outcon
	            countq = len(dom.getElementsByTagName('query'))
	            for x in range(countq):
	                arstr = dom.getElementsByTagName('query')[x]
	                children =  arstr.childNodes
	                text = ""
	                for c in children:
	                    if c.nodeType == c.TEXT_NODE:
	                        text += c.data
	                    else:
	                        if c.nodeName in replacements.keys():
	                            text += replacements[c.nodeName]
	                        else: # not text, nor a listed tag
	                            text += c.firstChild.wholeText.strip()
	                print "Quering : " + str(text.strip())
	                time.sleep(3)
	                try:
	                        men = menu.Menu(self.connected, self.session)
	                        men.do_query(str(text.strip()))
	                except Exception, e:
	                        print e
	                        pass
	        elif sconn == "0" and self.isconn == False:
	            print "Device : [disconnected]"
	            #TODO - work here
	       
	        elif sconn == "0" and self.isconn == True:
	            print "Device : [connected]"
	            #TODO - work here
	
	        else:
	            print "Exiting : Error !! (Please check the expliot !)"
              


    def complete_sploit(self, text, line, begidx, endidx):
        if not text:
            completions = self.exploits[:]
        else:
            completions = [ f
                            for f in self.exploits
                            if f.startswith(text)
                            ]
        return completions

